/*
    1.const 声明一个只读变量，一旦声明，常量的值就不会改变。
    2.const的作用域与let命令相同：只在声明所在的块级作用域内有效。
    3.const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。
    4.const声明的常量，也与let一样不可重复声明。
    5.const本质
        实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。
        对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
        但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，
        const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。
        因此，将一个对象声明为常量必须非常小心
*/
const PI = 3.1415;
console.log(PI)


/*
    1. const声明一个对象
        常量foo储存的是一个地址，这个地址指向一个对象。
        不可变的只是这个地址，即不能把foo指向另一个地址，
        但对象本身是可变的，所以依然可以为其添加新属性
*/
const foo = {};
// 添加一个属性，可以成功
foo.prop = 123;
console.log(foo.prop); // 123
// 将foo指向另一个对象，报错
// foo = {}; 

/*
    2. 常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错
*/ 
const a = [];
a.push("hellow"); // 可执行
// a = ["Dave"];  // 报错
console.log(a);

















